package iaProjectFolder;

import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.Timer;
import javax.swing.border.EmptyBorder;
import javax.swing.JButton;

import java.awt.event.ActionListener;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.LinkedList;
import java.awt.event.ActionEvent;
import javax.swing.SwingConstants;
import java.awt.Font;
import java.awt.Color;

public class JeopardyGame extends DataSuperClass {

	private JPanel contentPane;
	JButton[][] jeapordyButtons;
	JLabel[] teamsDisplay;
	JLabel[] categoryName;
	int localTeamCount;
	boolean originIsGameOptions = false;

	// note if the value passed to this class for teamCount is zero, then the frame
	// it originated from is not
	private static int milliseconds, seconds;

	Timer autoSaveTimer;

//	public static void main(String[] args) {
//		EventQueue.invokeLater(new Runnable() {
//			public void run() {
//				try {
//					JeopardyGame frame = new JeopardyGame(LinkedList<String> selectedCategoires);
//					frame.setVisible(true);
//				} catch (Exception e) {
//					e.printStackTrace();
//				}
//			}
//		});
//	}

	public JeopardyGame(int teamCount, String saveFileName) {
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		setBounds(300, 200, 1000, 400);
		contentPane = new JPanel();
		contentPane.setBackground(new Color(0, 0, 128));
		contentPane.setBorder(new EmptyBorder(5, 5, 5, 5));
		setContentPane(contentPane);
		contentPane.setLayout(null);

		// making info passed to this frame usable
//		this.currentTeam = currentTeam;
//		this.selectedCategories = selectedCategories;
//		this.teamCount = teamCount;

		// if the game isn't loading from a save file, then the game takes the number of
		// teams from a passed parameter
		if (saveFileName == null) {
			this.teamCount = teamCount;
		}

		System.out.println("==================================================================");

		for (int i = 0; i < selectedCategories.size(); i++) {
			System.out.println(selectedCategories.get(i));
		}

		JLabel currentTeamLbl = new JLabel("Current Team: " + currentTeam);
		currentTeamLbl.setForeground(Color.WHITE);
		currentTeamLbl.setToolTipText("");
		currentTeamLbl.setHorizontalAlignment(SwingConstants.CENTER);
		currentTeamLbl.setBounds(6, 66, 122, 29);
		contentPane.add(currentTeamLbl);

		loadTableData();

//		localTeamCount = teamPoints.size();

		loadQuestions(saveFileName);

		System.out.println("question " + questionInfo.length);
		System.out.println("answer " + answerInfo.length);
		System.out.println("image " + imageInfo.length);

//		System.out.println("Print all question data");
//		// test info generated by printing data
//		for (int column = 0; column < questionInfo.length; column++) {
//			for (int row = 0; row < questionInfo[column].length; row++) {
//				System.out.println(questionInfo[column][row]);
//				System.out.println(answerInfo[column][row]);
//				System.out.println(imageInfo[column][row]);
//			}
//		}

//		for (int i = 0; i < selectedCategories.size(); i++) {
//			System.out.println(selectedCategories.get(i));
//		}

		// creates all the labels with team numbers and points
		teamsDisplay = new JLabel[localTeamCount];
		for (int i = 0; i < localTeamCount; i++) {

//					 makes sure this is only added when a new game is being generated
			if (originIsGameOptions == true) {
				teamPoints.add(0);
			}

			teamsDisplay[i] = new JLabel("Team " + (i + 1) + ": " + teamPoints.get(i));
			teamsDisplay[i].setForeground(Color.WHITE);
			teamsDisplay[i].setBounds(26, 96 + i * 30, 90, 16);
			contentPane.add(teamsDisplay[i]);
		}

		// generates all of the buttons that contestants/teams will press
		jeapordyButtons = new JButton[selectedCategories.size()][5];
		System.out.println("" + selectedCategories.size());
		System.out.println("jeopardy Buttons length: " + jeapordyButtons.length);

		for (int column = 0; column < selectedCategories.size(); column++) {
			for (int row = 0; row < 5; row++) {
				jeapordyButtons[column][row] = new JButton("" + (row + 1) * 100);
				jeapordyButtons[column][row].setBackground(Color.ORANGE);
				jeapordyButtons[column][row].setOpaque(true);
				jeapordyButtons[column][row].setBorderPainted(false);

				final int tempRow = row;
				final int tempColumn = column;

				jeapordyButtons[column][row].addActionListener(new ActionListener() {
					public void actionPerformed(ActionEvent arg0) {
						// TODO fix display for new question

						System.out.println(currentTeam);
						for (int i = 0; i < selectedCategories.size(); i++) {
							System.out.println(selectedCategories.get(i));
						}
						System.out.println(teamCount);

						// save file (first perameter is null, because we only want to read from the
						// file once
						QuestionDisplay frame = new QuestionDisplay(null, tempColumn, tempRow);
						frame.setVisible(true);
						autoSaveTimer.stop();
						dispose();
//						}
						System.out.println("row: " + tempRow + ", column: " + tempColumn);
					}
				});
				jeapordyButtons[column][row].setBounds(137 + 120 * column, 91 + 45 * row, 117, 40);
				contentPane.add(jeapordyButtons[column][row]);

//				System.out.println("row: " + tempRow + ", column: " + tempColumn);
				if (questionInfo[column][row].contentEquals("") && answerInfo[column][row].contentEquals("")) {
					jeapordyButtons[column][row].setEnabled(false);
//					jeapordyButtons[column][row].setBackground(new Color(255, 200, 100));
//					jeapordyButtons[column][row].setText("");	
//					jeapordyButtons[column][row].setVisible(false); //can also make it invisible or no text
				}
			}
		}

		// creates the JLabels for each of the columns
		categoryName = new JLabel[selectedCategories.size()];
//		System.out.println("categories size: " + selectedCategoires.size());
		for (int i = 0; i < selectedCategories.size(); i++) {
			categoryName[i] = new JLabel(selectedCategories.get(i));
			categoryName[i].setForeground(Color.white);
			categoryName[i].setHorizontalAlignment(SwingConstants.CENTER);
			categoryName[i].setBounds(137 + (120 * i), 56, 117, 40);
			contentPane.add(categoryName[i]);
//			System.out.println(selectedCategoires.get(i));
		}

		// nested for loop, with JLabels on the outside and JButtons being instantiated
		// on the inside

		JButton exitBtn = new JButton("Main Menu");
//		exitBtn.setBackground(Color.ORANGE);	
//		exitBtn.setOpaque(true);
//		exitBtn.setBorderPainted(false);
		exitBtn.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent arg0) {
				MainMenu frame = new MainMenu();
				frame.setVisible(true);
				autoSaveTimer.stop();
				dispose();
			}
		});
		exitBtn.setBounds(19, 331, 98, 29);
		contentPane.add(exitBtn);

//		JButton btnNewButton_1 = new JButton("");
//		btnNewButton_1.addActionListener(new ActionListener() {
//			public void actionPerformed(ActionEvent arg0) {
//			}
//		});
//		btnNewButton_1.setBounds(137, 41, 117, 29);
//		contentPane.add(btnNewButton_1);

		JButton saveGameBtn = new JButton("Save Game");
//		saveGameBtn.setBackground(Color.orange);
//		saveGameBtn.setOpaque(true);
//		saveGameBtn.setBorderPainted(false);
		saveGameBtn.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent arg0) {
				String fileName = JOptionPane.showInputDialog("Save file name");
//				System.out.println(fileName);

				File fileToCheck = new File(fileName + ".sav");

				// checks to see if user cancelled making a new save file
				if ((fileName == null || fileName.contentEquals("")) == false) {

					// checks if file already exists
					// if file already exists, asks user if they want to overwrite the file
					if (fileToCheck.exists() == false) {
						saveGame(fileName);
					} else {
						int confirmOption = JOptionPane.showConfirmDialog(null,
								"This save file already exists. Do you want to overwrite?", "Warning",
								JOptionPane.YES_NO_OPTION);
						if (confirmOption == JOptionPane.OK_OPTION) {
							saveGame(fileName);
						}
					}
				}

			}
		});
		saveGameBtn.setBounds(876, 331, 98, 29);
		contentPane.add(saveGameBtn);

		JLabel titleLabel = new JLabel("JEOPARDY");
		titleLabel.setForeground(Color.WHITE);
		titleLabel.setFont(new Font("Lucida Grande", Font.PLAIN, 36));
		titleLabel.setHorizontalAlignment(SwingConstants.CENTER);
		titleLabel.setBounds(6, 6, 938, 57);
		contentPane.add(titleLabel);

		JLabel descriptionLabel = new JLabel("Pick a question");
		descriptionLabel.setFont(new Font("Lucida Grande", Font.PLAIN, 22));
//		descriptionLabel.setEnabled(false);
		descriptionLabel.setHorizontalAlignment(SwingConstants.CENTER);
		descriptionLabel.setForeground(Color.WHITE);
		descriptionLabel.setBounds(145, 314, 653, 52);
		contentPane.add(descriptionLabel);

		if (allQuestionsComplete() == true) {
			JOptionPane.showMessageDialog(null, "Game complete");
		}

		autoSave();
	}

	private void loadQuestions(String saveFileName) {
		if (teamCount != 0) {
			originIsGameOptions = true;
		}

		// checks if data was read into the 2dimensional arrays which carry
		// the info for each question
		if (questionInfoGenerated == false) {

			if (saveFileName == null) {
				resetQuestions();
				System.out.println("not reading from a file");

				localTeamCount = teamCount;
			} else {
				// load info from save File
				loadSaveFile(saveFileName);

				localTeamCount = teamPoints.size();
				saveFileName = null;
				System.out.println("Save File Read.");
			}
			questionInfoGenerated = true;
		}

		if (teamCount == 0) {
			localTeamCount = teamPoints.size();
		}

	}

	private void generatePointsLabels() {
		// creates all the labels with team numbers and points
		teamsDisplay = new JLabel[localTeamCount];
		for (int i = 0; i < localTeamCount; i++) {

//			 makes sure this is only added when a new game is being generated
			if (originIsGameOptions == true) {
				teamPoints.add(0);
			}

			teamsDisplay[i] = new JLabel("Team " + (i + 1) + ": " + teamPoints.get(i));
			teamsDisplay[i].setForeground(Color.WHITE);
			teamsDisplay[i].setBounds(26, 96 + i * 30, 90, 16);
			contentPane.add(teamsDisplay[i]);
		}
	}

	private void resetQuestions() {
		// this whole code block will give the program the question and answer info

//		questionLocation = new int[selectedCategories.size()][5];
		questionInfo = new String[selectedCategories.size()][5];
		answerInfo = new String[selectedCategories.size()][5];
		imageInfo = new String[selectedCategories.size()][5];

		for (int btnColumn = 0; btnColumn < questionInfo.length; btnColumn++) {
			// this list outputs questionDTM indices of questions within a given category
			LinkedList<Integer> questionResults = new LinkedList<Integer>();

			// search through the entire questionDTM looking for questions in a given
			// category
//			System.out.println("btnColumn: " + btnColumn);

			for (int i = 0; i < questionDTM.getRowCount(); i++) {
				String currentCategory = selectedCategories.get(btnColumn);

				if (questionDTM.getValueAt(i, 4).toString().contentEquals(currentCategory)) {
					questionResults.add(i);
				}
			}

//			System.out.println("length: " + questionResults.size());
//			for (int y = 0; y < questionResults.size(); y++) {
//				System.out.println(questionResults.get(y));
//			}

			for (int btnRow = 0; btnRow < questionInfo[btnColumn].length; btnRow++) {

				int questionDifficulty = btnRow + 1;

				// takes into account if the for loop never occurs
				if (questionResults.size() == 0) {
					questionInfo[btnColumn][btnRow] = "";
					answerInfo[btnColumn][btnRow] = "";
					imageInfo[btnColumn][btnRow] = "";
				}

				// sees if any of the results for this category have the same
				// value as the difficulty being looked for
				for (int i = 0; i < questionResults.size(); i++) {

					if (questionDifficulty == (int) questionDTM.getValueAt(questionResults.get(i), 2)) {
//						System.out.println("Sucess! Question with valid difficulty found");
						questionInfo[btnColumn][btnRow] = questionDTM.getValueAt(questionResults.get(i), 0).toString();
						answerInfo[btnColumn][btnRow] = questionDTM.getValueAt(questionResults.get(i), 1).toString();
						imageInfo[btnColumn][btnRow] = questionDTM.getValueAt(questionResults.get(i), 3).toString();
						questionResults.remove(i);
						break;

					} else if (i == questionResults.size() - 1) {
						// if there are no questions with the correct difficulty, program makes them
						// blank
						questionInfo[btnColumn][btnRow] = "";
						answerInfo[btnColumn][btnRow] = "";
						imageInfo[btnColumn][btnRow] = "";
					}
				}

				// above doesn't take into account multiple categories
				// will always select the first that appears
				// doesn't account for multiple questions with same difficulty either

//					// gets the difficulty from the database
//					try {
//						questionDifficulty = Integer.parseInt(questionDTM.getValueAt(i, 2).toString());
//					} catch (NumberFormatException e) {
//						e.printStackTrace();
//						JOptionPane.showMessageDialog(null, "One of the difficulties is not a number");
//					}
			}
		}
	}

	private boolean allQuestionsComplete() {
		// loops through all the for loops to see if every question was answered

		boolean temp = false;
		for (int column = 0; column < questionInfo.length; column++) {
			for (int row = 0; row < questionInfo[column].length; row++) {
				if ((questionInfo[column][row].contentEquals("")
						&& answerInfo[column][row].contentEquals("")) == false) {
//					temp = false;
					// return also functions as a break
					System.out.println();
					return false;
				} else if (column == questionInfo.length - 1 && row == questionInfo[column].length - 1) {
					temp = true;
				}
			}
		}
		return temp;
	}

	private void saveGame(String fileName) {
		// saving to a file actually work

		try { // checks if the instruction will have runtime error
			FileOutputStream in = new FileOutputStream(fileName + ".sav");
			PrintWriter w = new PrintWriter(in);

			// writes points into a text file
			w.println("teamInfo");
			for (int i = 0; i < teamPoints.size(); i++) {
//				System.out.println(teamPoints.get(i));
				w.println(teamPoints.get(i));
			}
			w.println("teamInfoEnd");

			// writes questionInfo
			w.println("questionInfo");
			// tells the program how many columns there are
			w.println(questionInfo.length);

			for (int column = 0; column < questionInfo.length; column++) {
				w.println(selectedCategories.get(column)); // writes category

				// writes actual question info
				for (int row = 0; row < questionInfo[column].length; row++) {
					w.println(questionInfo[column][row]);
					w.println(answerInfo[column][row]);
					w.println(imageInfo[column][row]);
				}
//					w.println(selectedCategories.get(column) + ":Category.end"); // writes category
			}
			w.println("questionInfoEnd");
			System.out.println("File saved sucessfully!");
			// check if file is saved when user exits
			// fileSaved = true;
			w.close();
		} catch (IOException e) {
			e.printStackTrace();
			JOptionPane.showMessageDialog(null, "Error: failed to make save.");
		}
	}

	private void loadSaveFile(String fileName) {
		// TODO make loading from a file actually work
		try {
			File fileToLoad = new File(fileName);
			FileReader in = new FileReader(fileToLoad);
			BufferedReader r = new BufferedReader(in);

			// reads the info for how many points there are
			// uses that to determine number of teams
			if (r.readLine().contentEquals("teamInfo")) {
				String temp = "";
				while ((temp = r.readLine()).contentEquals("teamInfoEnd") == false) {
					try {
						teamPoints.add(Integer.parseInt(temp));
//						System.out.println(temp);
					} catch (NumberFormatException e) {
						e.printStackTrace();
						JOptionPane.showMessageDialog(null, "Error: One value for teamPoints was not a number");
					}
				}
			}

			// declared as 6 categories/columns because actual number of columns is unknown
			// unused columns will simply not be used and can be left as null
			// alternatively can also save the number of categories/columns

			// information for each question
			if (r.readLine().contentEquals("questionInfo")) {

				String temp = "";
				// while loop is because you're not sure how many catgories are selected
				int column = 0;

				int numberOfCategories = Integer.parseInt(r.readLine());

				questionInfo = new String[numberOfCategories][5];
				answerInfo = new String[numberOfCategories][5];
				imageInfo = new String[numberOfCategories][5];

				while ((temp = r.readLine()).contentEquals("questionInfoEnd") == false) {
					selectedCategories.add(temp);

					// for loop because each of the categories has 5 questions
					// (questions can be blank)
					// reads info like question, answer and image
//					System.out.println("Category: " + selectedCategories.get(column));
					for (int row = 0; row < 5; row++) {
						questionInfo[column][row] = r.readLine();
						answerInfo[column][row] = r.readLine();
						imageInfo[column][row] = r.readLine();
					}
					column++;
				}
			}

			System.out.println("Sucesfully loaded save!");
			r.close();

		} catch (IOException e) {
			e.printStackTrace();
			JOptionPane.showMessageDialog(null, "Error: save file could not be loaded");
		}

		// print results
//		for (int column = 0; column < questionInfo.length; column++) {
//			System.out.println("Category: " + selectedCategories.get(column));
//			for (int row = 0; row < questionInfo[column].length; row++) {
//				System.out.println(questionInfo[column][row]);
//				System.out.println(answerInfo[column][row]);
//				System.out.println(imageInfo[column][row]);
//			}
//		}

	}

	private void autoSave() {
		ActionListener autoSave = new ActionListener() {
			public void actionPerformed(ActionEvent evt) {
				++milliseconds;
				if (milliseconds == 1000) {
					seconds++;
					milliseconds = 0;
				}

				// saves the game every 20 seconds
				if (seconds == 20) {
					seconds = 0;
					saveGame("AutoSave");
					System.out.println("Auto Saved.");
				}
			}
		};
		autoSaveTimer = new Timer(1, autoSave);
		autoSaveTimer.start();
	}
}
